knitr::opts_chunk$set(echo = TRUE)
source("functions/ipak.R")
ipak(packages <- c("readxl", "reshape2", "magrittr", "flora",
"data.table", "ape", "phytools", "brranching",
"picante", "xlsx"))
raw.df <- read_excel("data/raw-data.xlsx", sheet = 1, col_names = TRUE)
str(raw.df) # estrutura da matriz e os tipos de variáveis contidas
new.df <-
subset(
raw.df,
select = c(
"sites",
"morphospecies",
"name.genus",
"name.epithet"
)
)
# new.df$name.merged <-  # 'name.merged' será uma nova coluna
#   with(new.df,         # em 'new.df', contendo a
#        paste0(         # concatenação das strings em
#          name.genus,   # 'name.genus'
#          ".",          # mais um ponto (".") e
#          name.epithet  # name.epithet
#          )
#        )
new.df$name.coded <-          # 'name.coded' será uma nova coluna
with(new.df,                # em 'new.df', contendo a
paste0(                # concatenação das strings
substr(              # que tiveram as letras extraídas
name.genus, 1, 3   # 'name.genus' (da primeira à terceira letra)
),                 # mais
".",                 # um ponto (".") e
substr(              #
name.epithet, 1, 3 # 'name.epithet' (da primeira à terceira letra)
)
)
)
str(new.df)
df1 <- ftable(morphospecies ~ sites, new.df) %>% # mantém df1 para a próxima função
as.matrix(.) %>% # o ponto se refere à df1
as.data.frame(.) # o ponto se refere à df1
df1
df2 <- ftable(name.coded ~ sites, new.df) %>% # mantém df2 para a próxima função
as.matrix(.) %>% # o ponto se refere à df2
as.data.frame(.) # o ponto se refere à df2
df2      # chamando a matriz no console
df3 <- df2[order(colSums(df2), decreasing = TRUE)]
df3
xy <- read_excel("data/raw-data.xlsx", sheet = 2, col_names = TRUE) %>%
.[,-1]
for (i in colnames(df3)) {
plot(
xy,
cex = df3[, i],
pch = 22,
col = "white",
bg = "gray"
)
title(names(df3[i]))
}
raw.dt <- as.data.table(raw.df)
names.aggregated <-
raw.dt[, list(.N), by = c("name.family",
"name.genus",
"name.epithet")]
names.aggregated
query.flora <- paste0(names.aggregated$name.genus,
" ",
names.aggregated$name.epithet)
query.flora
names.flora.2020 <-
get.taxa(
query.flora,
replace.synonyms = TRUE,
suggest.names = TRUE,
life.form = TRUE,
habitat = TRUE,
vernacular = TRUE,
states = TRUE,
establishment = TRUE,
suggestion.distance = 1
)
View(names.flora.2020)
phylomatic.names <-
tolower(paste(names.aggregated$name.family,
names.aggregated$name.genus,
paste(names.aggregated$name.genus,
names.aggregated$name.epithet,
sep = "_"),
sep = "/"))
phylomatic.names
get.tree.phylomatic <-
phylomatic(
phylomatic.names,
taxnames = FALSE,
informat = "newick",
method = "phylomatic",
storedtree = "R20120829",
outformat = "newick",
clean = FALSE, # influência no plot
db = "apg",
verbose = TRUE
)
# se o 'clean = TRUE', use a função plot direto.
# plot(get.tree.phylomatic)
plot(collapse.singles(get.tree.phylomatic), no.margin=TRUE)
###############################################################################
################### PHYLOCOM WORKFLOW #########################################
###############################################################################
# Uma pequena adaptação baseada em:
# https://greggilbertlab.sites.ucsc.edu/wp-content/uploads/sites/276/2015/10/R_Class10b_PicatePhylomatic.pdf
# temp <- tempfile()
# download.file("http://phylodiversity.net/phylocom/phylocom-4.2.zip", temp, mode = "wb")
# unzip(temp)
# setwd("phylocom-4.2/w32")
# getwd()
#
# write.tree(get.tree.phylomatic, "tree-phylomatic")
#
# file.rename(from = "../example_data/bladj_example/wikstrom.ages",
#            to = "ages")
#
# dated.tree <- system("phylocom bladj -f tree-phylomatic > dated-tree",
#                      intern = TRUE)
#
# write(dated.tree, "dated-tree")
#
# dated.clean <- scan("dated-tree", what = "character", nmax = -1, sep = "]")
#
# dated.clean <-
#   sub(pattern = ")euphyllophyte:1.000000",
#       replacement = "",
#       x = dated.clean)
#
# dated.clean <- sub(pattern = "\\(",
#                    replacement = "",
#                    x = dated.clean)
#
# dated.clean <- gsub(pattern = " ",
#                     replacement = "",
#                     x = dated.clean)
#
# dated.clean <- read.newick(text = dated.clean)
#
# setwd("../../")
# getwd()
#
# write.tree(dated.clean, "data/dated.clean.txt")
dated.clean <- read.newick(file = "data/dated.clean.txt")
# dated.clean$edge
# dated.clean$tip.label
# dated.clean$Nnode
# dated.clean$node.label
plot(collapse.singles(dated.clean), no.margin=TRUE)
add.scale.bar(length = 100)
# plot.phylo(collapse.singles(dated.clean), type = "phylogram", use.edge.length = TRUE, show.tip.label = TRUE, show.node.label = TRUE, edge.color = "grey10")
# nodelabels()
# tiplabels()
#
# cophenetic.phylo(collapse.singles(dated.clean))
temp <- tempfile()
download.file("http://phylodiversity.net/phylocom/phylocom-4.2.zip", temp, mode = "wb")
temp <- tempfile()
download.file("https://github.com/phylocom/phylocom/releases/download/4.2/phylocom-4.2.zip", temp, mode = "wb")
temp <- tempfile()
download.file("https://github.com/phylocom/phylocom/releases/download/4.2/phylocom-4.2.zip", temp, mode = "wb")
temp <- tempfile()
download.file("https://github.com/phylocom/phylocom/releases/download/4.2/phylocom-4.2.zip", temp, mode = "wb")
